# log_format api_main '$remote_addr - $remote_user [$time_local] "$request"'
#                     '$status $body_bytes_sent "$http_referer" "$http_user_agent"'
#                     '"$http_x_forwarded_for" "$api_name"';

log_format api_main [escape=json] '{"time": "$time_iso8601", "remote_addr": "$proxy_protocol_addr", "x-forward-for": "$proxy_add_x_forwarded_for",
                                    "remote_user": "$remote_user", "bytes_sent": $bytes_sent, "request_time": $request_time, "status":$status, "vhost": "$host", "request_proto": "$server_protocol",
                                    "path": "$uri", "request_query": "$args", "request_length": $request_length, "duration": $request_time,"method": "$request_method", "http_referrer": "$http_referer",
                                    "http_user_agent": "$http_user_agent" }';


include api_backends.conf;
include api_keys.conf;

server {
    set $api_name -; # Start with an undefined API name, each API will update this value
    access_log /var/log/nginx/api_access.log api_main; # Each API may also log to a separate file

    server_name _;
    listen 81;
    # listen 443 ssl;
    # server_name api.example.com;

    # # TLS config
    # ssl_certificate      /etc/ssl/certs/api.example.com.crt;
    # ssl_certificate_key  /etc/ssl/private/api.example.com.key;
    # ssl_session_cache    shared:SSL:10m;
    # ssl_session_timeout  5m;
    # ssl_ciphers          HIGH:!aNULL:!MD5;
    # ssl_protocols        TLSv1.1 TLSv1.2;

    # API definitions, one per file
    include api_conf.d/*.conf;

    location = / {
        return 404; # return 404 for unrecognized URIs
    }

    # Error responses
    error_page 404 = @400;         # Invalid paths are treated as bad requests
    proxy_intercept_errors on;     # Do not send backend errors to the client
    include api_json_errors.conf;  # API client friendly JSON error responses
    default_type application/json; # If no content-type then assume JSON
}